@page "/Dashboardsales"
@using DieselBrandstofCafe.Components.Models
@using DieselBrandstofCafe.Components.Data
@inject IDashboardDataService DashboardDataService
@inject IProductPerBestelrondeService ProductPerBestelrondeService
@inject IVoorraadOverviewService VoorraadOverviewService

<PageTitle>Dashboard</PageTitle>

<!-- Titel dashboard -->
<div class="dashboard">
    <div class="left-panel">
        <div class="Dashboard">
            <h1 class="page-title textwit" style="margin-bottom: 30px">Dashboard overview</h1>
        </div>
    </div>
</div>

<!-- Today sales -->
<section>
    <div class="container-fluid card containerkleur">
        <div class="row">
            <div class="col-6">
                <div class="card-body">
                    <h5 class="textoranje"><b>Today's Sales</b></h5>
                </div>
            </div>
            <div class="col-6">
                <div class="card-body text-end">
                    <button class="export-button">Export</button>
                </div>
            </div>
        </div>

        <!-- Sales boxes row -->
        <div class="row sales-row">
            <div class="col-2">
                <div class="sales-box box-1">
                    <h3>Total Revenue</h3>
                    <p>@totalRevenue €</p>
                </div>
            </div>
            <div class="col-2">
                <div class="sales-box box-2">
                    <h3>Total Orders</h3>
                    <p>@totalOrders orders</p>
                </div>
            </div>
            <div class="col-2">
                <div class="sales-box box-3">
                    <h3 class="textwit">Products Sold</h3>
                    <p>@totalProductsSold products</p>
                </div>
            </div>
            <div class="col-2">
                <div class="sales-box box-4">
                    <h3>Total Menu Items</h3>
                    <p>@totalMenuItems items</p>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Tweede sectie: BarChart en knoppen -->
<div class="container-fluid d-flex flex-row flex-wrap" style="margin-top: 20px">
    <div class="col-lg-5">
        <section class="card mb-3 containerkleur" style="margin-top: 20px; padding-left: 10px">
            <div class="card-body">
                <h5 class="textoranje">Chart</h5>
            </div>
            <div class="bargraph-row">
                <BarChart @ref="barChart" Width="500" Height="300" />
                <div class="mt-5" style="margin-bottom: 50px">
                    <Button Type="ButtonType.Button" Color="ButtonColor.Primary" Size="ButtonSize.Small" @onclick="async () => await ShowHorizontalBarChartAsync()">Horizontal Bar Chart</Button>
                    <Button Type="ButtonType.Button" Color="ButtonColor.Primary" Size="ButtonSize.Small" @onclick="async () => await ShowVerticalBarChartAsync()">Vertical Bar Chart</Button>
                </div>
            </div>
        </section>
    </div>

    <!-- Derde sectie: Top Producten -->
    <div class="col-lg-3">
        <section class="card mb-3 ml-3 containerkleur" style="margin-top: 20px; margin-left: 20px;">
            <div class="card-body">
                <h5 class="textoranje"><b>Top Products</b></h5>
                <div style="max-height: 400px; overflow-y: auto;">
                    <ul>
                        @foreach (var product in popularProducts)
                        {
                            <li class="textwit">@product.ProductNaam - @product.TotaleAantalProduct keer georderd</li>
                        }
                    </ul>
                </div>
            </div>
        </section>
    </div>

    <!-- Voorraad overzicht sectie -->
    <div class="col-lg-3">
        <section class="card mb-3 ml-3 containerkleur" style="margin-top: 20px; margin-left: 20px;">
            <div class="container-fluid card containerkleur">
                <div class="card-body">
                    <h5 class="textoranje"><b>Voorraad Overzicht</b></h5>
                    <div style="max-height: 400px; overflow-y: auto;">
                        <ul class="list-unstyled">
                            @foreach (var product in voorraadProducten)
                            {
                                <li class="textwit">
                                    <span>@product.ProductNaam - Voorraad: @product.VoorraadPP</span>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </section>
    </div>
</div>

<style>
    .export-button {
        background-color: #FF6F00;
        color: white;
        border: none;
        padding: 10px;
        cursor: pointer;
        border-radius: 10px;
    }

    .sales-row {
        display: flex;
        justify-content: space-between;
        margin-top: 20px;
        margin-bottom: 45px;
        margin-left: 30px;
        margin-right: 30px;
    }

    .sales-box {
        color: black;
        width: 12vw;
        height: 12vw;
        text-align: center;
        border-radius: 40px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 10px;
        border: 1px solid #ddd;
        margin-bottom: 20px;
        flex-direction: column;
        align-items: center;
    }

        .sales-box h3 {
            margin-bottom: 10px;
            font-size: 1.2em;
            color: #333;
            text-align: center;
        }

        .sales-box p {
            margin: 0;
            font-size: 1.5em;
            color: #555;
            text-align: center;
        }

    .box-1 {
        background-color: #FFE2E5;
    }

    .box-2 {
        background-color: #FFF4DE;
    }

    .box-3 {
        background-color: #DCFCE7;
    }

    .box-4 {
        background-color: #F3E8FF;
    }

    .textoranje {
        color: #FF6F00;
    }

    .containerkleur {
        background-color: #1a1f26;
    }

    .incontainerkleur {
        background-color: #27333f;
    }

    .textwit {
        color: white;
    }
</style>

@code {
    private BarChart barChart = default!;
    private BarChartOptions barChartOptions = default!;
    private ChartData chartData = default!;

    private int datasetsCount = 0;
    private int labelsCount = 0;
    private string[] weekdays = { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saterday", "Sunday" };
    private Random random = new();

    private int totalRevenue;
    private int totalOrders;
    private int totalProductsSold;
    private int totalMenuItems;

    private List<ProductPerBestelronde> popularProducts = new List<ProductPerBestelronde>();
    private List<OverzichtPerProduct> voorraadProducten = new List<OverzichtPerProduct>();

    protected override async Task OnInitializedAsync()
    {
        // Laad gegevens asynchroon vanuit de database
        try
        {
            chartData = new ChartData { Labels = GetDefaultDataLabels(7), Datasets = GetDefaultDataSets(1) };
            barChartOptions = new BarChartOptions { Responsive = true, Interaction = new Interaction { Mode = InteractionMode.Index } };

            // Laad data van de database
            totalRevenue = await DashboardDataService.GetTotalRevenueAsync();
            totalOrders = await DashboardDataService.GetTotalOrdersAsync();
            totalProductsSold = await DashboardDataService.GetTotalProductsSoldAsync();
            totalMenuItems = await DashboardDataService.GetTotalMenuItemsAsync();

            // Laad top producten van de database
            popularProducts = await DashboardDataService.GetPopularProductsAsync();

            // Laad voorraad gegevens van de database
            voorraadProducten = (await VoorraadOverviewService.GetOverzichtVoorraadAsync()).ToList();

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
            // Handle error scenario
        }

        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await barChart.InitializeAsync(chartData, barChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task ShowHorizontalBarChartAsync()
    {
        barChartOptions.IndexAxis = "y";
        await barChart.UpdateAsync(chartData, barChartOptions);
    }

    private async Task ShowVerticalBarChartAsync()
    {
        barChartOptions.IndexAxis = "x";
        await barChart.UpdateAsync(chartData, barChartOptions);
    }

    #region Data Preparation

    private List<IChartDataset> GetDefaultDataSets(int numberOfDatasets)
    {
        var datasets = new List<IChartDataset>();

        for (var index = 0; index < numberOfDatasets; index++)
        {
            datasets.Add(GetRandomBarChartDataset());
        }

        return datasets;
    }

    private BarChartDataset GetRandomBarChartDataset()
    {
        var darkGreyColor = "#999";

        return new BarChartDataset()
            {
                Label = $"Verkopen",
                Data = GetRandomData(),
                BackgroundColor = new List<string> { darkGreyColor },
                BorderColor = new List<string> { darkGreyColor },
                BorderWidth = new List<double> { 1 }
            };
    }

    private List<double> GetRandomData()
    {
        var data = new List<double>();
        for (var index = 0; index < labelsCount; index++)
        {
            data.Add(random.Next(200));
        }

        return data;
    }

    private List<string> GetDefaultDataLabels(int numberOfLabels)
    {
        var labels = new List<string>();
        for (var index = 0; index < numberOfLabels; index++)
        {
            labels.Add(GetNextDataLabel());
        }

        return labels;
    }

    private string GetNextDataLabel()
    {
        labelsCount += 1;
        return weekdays[labelsCount - 1];
    }

    #endregion Data Preparation
}