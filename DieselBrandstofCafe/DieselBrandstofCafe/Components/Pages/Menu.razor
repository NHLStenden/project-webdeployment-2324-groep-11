@page "/menu"
@using DieselBrandstofCafe.Components.Models
@using DieselBrandstofCafe.Components.Data
@inject ICustomerService customerService

<div class="menu-page">
    <div class="left-panel">
        <div class="categories">
            <h2>Categories</h2>
            <div class="category-list">
                <div class="category-card"><button class="category-button"><img src=""><span>Beverages</span></button></div>
                <div class="category-card"><button class="category-button"><img src=""><span>Breakfast</span></button></div>
                <div class="category-card"><button class="category-button"><img src=""><span>Sandwiches</span></button></div>
                <div class="category-card"><button class="category-button"><img src=""><span>Soup & Salad</span></button></div>
                <div class="category-card"><button class="category-button"><img src=""><span>Pastry & Desserts</span></button></div>
            </div>
        </div>
        <div class="menu-items">
            <h2>Select Menu</h2>
            <div class="menu-list">
                @if (menuItems == null)
                {
                    <p>Loading...</p>
                }
                else if (!menuItems.Any())
                {
                    <p>No items found.</p>
                }
                else
                {
                    @foreach (var item in menuItems)
                    {
                        <div class="menu-item">
                            <h3>@item.ProductNaam</h3>
                            @* <p>@item.Beschrijving</p> *@
                            <p>€@item.ProductPrijs</p>
                            <button @onclick='() => AddToInvoice(item)'>Add to order</button>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
    <div class="right-panel">
        <div class="order-summary">
            <h2>Invoice</h2>
            <ul>
                @foreach (var invoiceItem in invoiceItems)
                {
                    <li>
                        @invoiceItem.Product.ProductNaam (€@invoiceItem.Product.ProductPrijs x @invoiceItem.AantalProduct)
                        <button @onclick="() => IncreaseAantalProduct(invoiceItem)">+</button>
                        <button @onclick="() => DecreaseAantalProduct(invoiceItem)">-</button>
                        <button @onclick="() => RemoveFromInvoice(invoiceItem)">Remove</button>
                    </li>
                }
            </ul>
            <div class="payment">
                <h5>Payment</h5>
                <p>Sub Total: €@subTotal</p>
                <p>Tax: €@tax</p>
                <p>Total Payment: €@total</p>
                <div class="payment-methods">
                    <button>Card</button>
                    <button>Cash</button>
                    <button>Ideal</button>
                </div>
                <button class="place-order-button">Place the order</button>
            </div>
        </div>
        <div class="additional-cards">
            <div class="popular-products">
                <h5>Popular Products</h5>
                <ul>
                    <li>Product 1</li>
                    <li>Product 2</li>
                    <li>Product 3</li>
                </ul>
            </div>
            <div class="sign-up-updates">
                <h5>Sign up for updates</h5>
                <form>
                    <input type="email" placeholder="Enter your email" required>
                    <button type="submit">Sign Up</button>
                </form>
            </div>
        </div>
    </div>
</div>

@code {

    List<Product>? menuItems;

    protected override async Task OnInitializedAsync()
    {
        menuItems = (await customerService.GetProductsAsync()).ToList();
    }

    // Lijst om items op de factuur bij te houden
    List<InvoiceItem> invoiceItems = new List<InvoiceItem>();

    decimal subTotal = 0;
    decimal tax = 0;
    decimal total = 0;

    void AddToInvoice(Product product)
    {
        var existingItem = invoiceItems.FirstOrDefault(item => item.Product.ProductID == product.ProductID);
        if (existingItem != null)
        {
            existingItem.AantalProduct++;
        }
        else
        {
            invoiceItems.Add(new InvoiceItem { Product = product, AantalProduct = 1 });
        }
        UpdateTotals();
    }

    // Functie om de hoeveelheid van een item te verhogen
    void IncreaseAantalProduct(InvoiceItem invoiceItem)
    {
        invoiceItem.AantalProduct++;
        UpdateTotals();
    }

    // Functie om de hoeveelheid van een item te verlagen
    void DecreaseAantalProduct(InvoiceItem invoiceItem)
    {
        if (invoiceItem.AantalProduct > 1)
        {
            invoiceItem.AantalProduct--;
        }
        else
        {
            invoiceItems.Remove(invoiceItem);
        }
        UpdateTotals();
    }

    // Functie om een item te verwijderen van de factuur
    void RemoveFromInvoice(InvoiceItem invoiceItem)
    {
        invoiceItems.Remove(invoiceItem);
        UpdateTotals();
    }

    // Functie om totaalbedrag van de factuur te berekenen
    void UpdateTotals()
    {
        subTotal = invoiceItems.Sum(item => item.Product.ProductPrijs * item.AantalProduct);
        tax = subTotal * 0.09M; // Eten is volgens mij een btw percentage van 9%
        total = subTotal + tax;
    }

    public class InvoiceItem
    {
        public Product ?Product { get; set; }
        public int AantalProduct { get; set; }
    }
}
