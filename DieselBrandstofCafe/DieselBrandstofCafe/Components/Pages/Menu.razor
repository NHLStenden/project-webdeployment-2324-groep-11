@page "/menu"
@using DieselBrandstofCafe.Components.Models

<div class="menu-page">
    <div class="left-panel">
        <div class="categories">
            <h2>Categories</h2>
            <div class="category-list">
                <div class="category-card"><button class="category-button"><img src=""><span>Beverages</span></button></div>
                <div class="category-card"><button class="category-button"><img src=""><span>Breakfast</span></button></div>
                <div class="category-card"><button class="category-button"><img src=""><span>Sandwiches</span></button></div>
                <div class="category-card"><button class="category-button"><img src=""><span>Soup & Salad</span></button></div>
                <div class="category-card"><button class="category-button"><img src=""><span>Pastry & Desserts</span></button></div>
            </div>
        </div>
        <div class="menu-items">
            <h2>Select Menu</h2>
            <div class="menu-list">
                <div class="menu-item">
                    <h3>Espresso</h3>
                    <p>Strong Italian coffee, base for drinks like lattes.</p>
                    <p>€3</p>
                    <button @onclick='() => AddToInvoice(new Product { ProductNaam = "Espresso", Prijs = 3 })'>Add to order</button>
                </div>
                <div class="menu-item">
                    <h3>Americano</h3>
                    <p>Espresso diluted with hot water, mimicking regular black coffee.</p>
                    <p>€3</p>
                    <button @onclick='() => AddToInvoice(new Product { ProductNaam = "Americano", Prijs = 3 })'>Add to order</button>
                </div>
                <div class="menu-item">
                    <h3>Cappuccino</h3>
                    <p>Equal parts espresso, steamed milk, and frothy milk foam.</p>
                    <p>€3</p>
                    <button @onclick='() => AddToInvoice(new Product { ProductNaam = "Cappuccino", Prijs = 3 })'>Add to order</button>
                </div>
                <div class="menu-item">
                    <h3>Flat White</h3>
                    <p>Espresso with velvety microfoam milk, stronger than a latte.</p>
                    <p>€3</p>
                    <button @onclick='() => AddToInvoice(new Product { ProductNaam = "Flat White", Prijs = 3 })'>Add to order</button>
                </div>
                <div class="menu-item">
                    <h3>Macchiato</h3>
                    <p>Espresso marked with a dollop of frothy milk.</p>
                    <p>€3</p>
                    <button @onclick='() => AddToInvoice(new Product { ProductNaam = "Macchiato", Prijs = 3 })'>Add to order</button>
                </div>
                <div class="menu-item">
                    <h3>Cappuccino</h3>
                    <p>Espresso mixed with chocolate and steamed milk, topped with whipped cream.</p>
                    <p>€3</p>
                    <button @onclick='() => AddToInvoice(new Product { ProductNaam = "Cappuccino", Prijs = 3 })'>Add to order</button>
                </div>
                <div class="menu-item">
                    <h3>Affogato</h3>
                    <p>Espresso poured over a scoop of vanilla ice cream.</p>
                    <p>€3</p>
                    <button @onclick='() => AddToInvoice(new Product { ProductNaam = "Affogato", Prijs = 3 })'>Add to order</button>
                </div>
                <div class="menu-item">
                    <h3>Ristretto</h3>
                    <p>A short shot of espresso, more concentrated and less bitter.</p>
                    <p>€3</p>
                    <button @onclick='() => AddToInvoice(new Product { ProductNaam = "Ristretto", Prijs = 3 })'>Add to order</button>
                </div>
                <div class="menu-item">
                    <h3>Cold Coffee</h3>
                    <p>Chilled coffee served over ice, often sweetened and creamy.</p>
                    <p>€3</p>
                    <button @onclick='() => AddToInvoice(new Product { ProductNaam = "Cold Coffee", Prijs = 3 })'>Add to order</button>
                </div>
                <!-- Voeg meer menu items toe -->
            </div>
        </div>
    </div>
    <div class="right-panel">
        <div class="order-summary">
            <h2>Invoice</h2>
            <ul>
                @foreach (var item in invoiceItems)
                {
                    <li>@item.ProductNaam (€@item.Prijs) <button @onclick="() => RemoveFromInvoice(item)">Remove</button></li>
                }
            </ul>
            <div class="payment">
                <h5>Payment</h5>
                <p>Sub Total: €@subTotal</p>
                <p>Tax: €@tax</p>
                <p>Total Payment: €@total</p>
                <div class="payment-methods">
                    <button>Card</button>
                    <button>Cash</button>
                    <button>Ideal</button>
                </div>
                <button class="place-order-button">Place the order</button>
            </div>
        </div>
        <div class="additional-cards">
            <div class="popular-products">
                <h5>Popular Products</h5>
                <ul>
                    <li>Product 1</li>
                    <li>Product 2</li>
                    <li>Product 3</li>
                </ul>
            </div>
            <div class="sign-up-updates">
                <h5>Sign up for updates</h5>
                <form>
                    <input type="email" placeholder="Enter your email" required>
                    <button type="submit">Sign Up</button>
                </form>
            </div>
        </div>
    </div>
</div>

<style>
    .menu-page {
        display: flex;
        justify-content: space-between;
    }

    .left-panel {
        flex: 75%;
        margin-right: 1em;
        max-height: 83vh;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
    }

    .right-panel {
        flex: 25%;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

    .categories, .menu-items {
        margin-bottom: 1em;
    }

        .categories h2, .menu-items h2 {
            text-align: left;
            font-weight: bold;
            padding-bottom: 1em;
            border-bottom: 2px solid #ccc;
            margin-bottom: 1em;
            width: 20%;
        }

    .order-summary h2 {
        text-align: center;
        font-weight: bold;
        margin-bottom: 20px;
        position: relative;
    }

        .order-summary h2::after {
            content: '';
            display: block;
            width: 25%;
            border-bottom: 2px solid #ccc;
            margin: 10px auto 0;
        }

    .category-list {
        display: flex;
        flex-direction: row;
    }

    .category-card {
        flex-grow: 1;
        margin-right: 1em;
    }

        .category-card button {
            width: 100%;
            border: none;
            background-color: white;
            color: black;
            cursor: pointer;
            border-radius: 10px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            gap: 10px;
            padding: 0;
        }

        .category-card img {
            width: 100%;
            height: 60px; 
            border-top-left-radius: 10px; 
            border-top-right-radius: 10px; 
            background-color: #F2F1F2;
        }

        .category-card span {
            font-size: 1.2em;
            color: #212529;
        }

    .menu-list {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        grid-gap: 1em;
        margin-right: 1em;
    }

    .menu-item {
        background-color: white;
        position: relative;
        display: flex;
        flex-direction: column;
        height: 300px;
        border: 1px solid #ccc;
        padding: 10px;
        text-align: center;
        border-radius: 10px;
    }

        .menu-item button {
            position: absolute;
            bottom: 10px; 
            left: 50%; 
            transform: translateX(-50%);
            background-color: #FF6F00;
            color: white;
            border: none;
            padding: 10px;
            cursor: pointer;
            border-radius: 10px;
        }

    .order-summary {
        background-color: white;
        border: 1px solid #ccc;
        padding: 10px;
        border-radius: 10px;
        height: 53vh;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        margin-bottom: 1em;
    }

        .order-summary ul {
            list-style-type: none;
            padding: 0;
            margin-bottom: 1em;
            flex-grow: 1;
            overflow-y: auto;
        }

            .order-summary ul li {
                display: flex;
                justify-content: space-between;
                margin-bottom: 5px;
            }

                .order-summary ul li button {
                    background-color: #e74c3c;
                    color: white;
                    border: none;
                    padding: 5px;
                    cursor: pointer;
                    border-radius: 10px;
                }

    .payment {
        margin-top: auto;
        position: sticky;
        bottom: 0;
        background-color: white;
        padding-top: 10px;
        border-top: 1px solid #ccc;
    }

        .payment p {
            margin: 5px 0;
        }

    .payment-methods {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        grid-gap: 10px;
        margin-top: 10px;
    }

        .payment-methods button {
            padding: 10px;
            width: 100%;
            border: none;
            cursor: pointer;
            border-radius: 10px;
        }

            .payment-methods button:nth-child(1),
            .payment-methods button:nth-child(2),
            .payment-methods button:nth-child(3) {
                background-color: #FFCBA3;
                color: #FF6F00;
            }

    .place-order-button {
        margin-top: 10px;
        padding: 10px;
        width: 75%;
        border: none;
        cursor: pointer;
        border-radius: 10px;
        background-color: #FF6F00;
        color: white;
    }

    .additional-cards {
        display: flex;
        flex-direction: column;
        gap: 1em;
    }

    .popular-products, .sign-up-updates {
        background-color: white;
        border: 1px solid #ccc;
        padding: 10px;
        border-radius: 10px;
        width: 100%;
    }

        .popular-products h5, .sign-up-updates h5, .payment h5 {
            text-align: left;
            font-weight: bold;
            margin-bottom: 10px;
        }

        .popular-products ul {
            list-style-type: none;
            padding: 0;
        }

        .sign-up-updates form {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .sign-up-updates input[type="email"] {
            padding: 10px;
            width: 80%;
            margin-bottom: 10px;
            border: 1px solid #ccc;
            border-radius: 10px;
        }

        .sign-up-updates button {
            padding: 10px;
            width: 40%;
            border: none;
            cursor: pointer;
            border-radius: 10px;
            background-color: #FF6F00;
            color: white;
        }
</style>

@code {
<<<<<<< Updated upstream
    //public class Product
    //{
    //public string Naam { get; set; }
    //public decimal Price { get; set; }
    //}


=======
    public class Product
    {
        public string ?Name { get; set; }
        public decimal Price { get; set; }
    }
>>>>>>> Stashed changes

    // Lijst om items op de factuur bij te houden
    List<Product> invoiceItems = new List<Product>();

    decimal subTotal = 0;
    decimal tax = 0;
    decimal total = 0;

    // Functie om een item toe te voegen aan de factuur
    void AddToInvoice(Product item)
    {
        invoiceItems.Add(item);
        UpdateTotals();
    }

    // Functie om een item te verwijderen van de factuur
    void RemoveFromInvoice(Product item)
    {
        invoiceItems.Remove(item);
        UpdateTotals();
    }

    // Functie om totaalbedrag van de factuur te berekenen
    void UpdateTotals()
    {
        subTotal = invoiceItems.Sum(item => item.Prijs);
        tax = subTotal * 0.09M; // Eten is volgens mij een btw percentage van 9%
        total = subTotal + tax;
    }
}
