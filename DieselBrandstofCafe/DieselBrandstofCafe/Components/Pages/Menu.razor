@page "/menu"
@using DieselBrandstofCafe.Components.Models
@using DieselBrandstofCafe.Components.Data
@inject IProductPerBestelrondeService productPerBestelrondeService
@inject IOrderService orderService
@inject ICategorieService categorieService
@inject ITableService TableService
@inject NavigationManager navigationManager

<div class="menu-page">
    <div class="left-panel">
        <div class="categories">
            <h2>Categories</h2>
            <div class="category-list">
                @if (categories == null)
                {
                    <p>Loading...</p>
                }
                else
                {
                    @foreach (var category in categories)
                    {
                        <div class="category-card">
                            <button class="category-button" @onclick='() => LoadMenuItems(category.CategorieID)'>
                                <img src="images\@category.CategorieAfbeelding" alt="@category.NaamCategorie">
                                <span>@category.NaamCategorie</span>
                            </button>
                        </div>
                    }
                }
                @if (curParentID >= 0)
                {
                    <button class="categories-back-button" @onclick='() => LoadPrevCategories()'>Back</button>
                }
            </div>
        </div>

        @if (menuItems != null && menuItems.Any())
        {
            <div class="menu-items">
                <h2>Select Menu</h2>
                <div class="menu-list">
                    @foreach (var item in menuItems)
                    {
                        <div class="menu-item">
                            <div class="menu-item-name">
                                <h3>@item.ProductNaam</h3>
                            </div>
                            <div class="product-image-container">
                                <img src="images\@item.ProductAfbeelding" class="product-image" onerror="src='images/Geen Afbeelding.png';">
                            </div>
                            <span>€@item.ProductPrijs</span>
                            <p>@item.ProductDesc</p>
                            <div class="add-ons">
                                <select id="addOnSelect" @onchange="(e) => SelectAddOn(e, item.ProductID)">
                                    <option value="">Extra Add-ons</option>
                                    @if (addOns != null)
                                    {
                                        @foreach (var AddOnID in addOns)
                                        {
                                            <option value="@AddOnID.ProductID">@AddOnID.ProductNaam - €@AddOnID.ProductPrijs</option>
                                        }
                                    }
                                </select>
                            </div>
                            <div class="invoice-menu-controls">
                                <div class="counter-background-menu">
                                    <button class="decrease-menu-item" @onclick='() => DecreaseAantalProductTemp(item)'>-</button>
                                    <span>@GetTempAantal(item)</span>
                                    <button class="increase-menu-item" @onclick='() => IncreaseAantalProductTemp(item)'>+</button>
                                </div>
                            </div>
                            <button class="add-menu-item" @onclick='() => AddToOrder(item)'>Add to order</button>
                        </div>
                    }
                </div>
            </div>
        }
    </div>

    <div class="right-panel">
        <div class="order-summary">
            <h2>Order</h2>
            <ul>
                @foreach (var OrderItem in orderItems)
                {
                    <li>
                        <div class="invoice-item">
                            <span>@OrderItem.Product?.ProductNaam (€@OrderItem.Product?.ProductPrijs)</span>
                            <div class="invoice-item-controls">
                                <span class="product-total">€@(OrderItem.Product?.ProductPrijs * OrderItem.AantalProduct)</span>
                                <div class="counter-background-invoice">
                                    <button class="decrease-invoice-item" @onclick="() => DecreaseAantalProduct(OrderItem)">-</button>
                                    <span>@OrderItem.AantalProduct</span>
                                    <button class="increase-invoice-item" @onclick="() => IncreaseAantalProduct(OrderItem)">+</button>
                                </div>
                            </div>
                        </div>
                    </li>
                }
            </ul>
            <div class="table-selection">
                @if (selectedTable == 0)
                {
                    <button @onclick="ShowTableOverlay">Select Table</button>
                }
                else
                {
                    <span>Table: @selectedTable</span>
                }
            </div>

            @if (showTableOverlay)
            {
                <div class="table-overlay">
                    <div class="table-overlay-content">
                        <h3>Select a Table</h3>
                        <div class="table-buttons">
                            @foreach (var table in tables)
                            {
                                <button class="table-button" @onclick="() => SelectTable(table.TafelId)">
                                    Table @table.TafelId
                                </button>
                            }
                        </div>
                        <button class="close-overlay" @onclick="HideTableOverlay">Close</button>
                    </div>
                </div>
            }
            <div class="payment">
                <h5>Table number:</h5>
                <h5>Total Payment: €@total</h5>
                <div class="place-order-button-container">
                    <button class="place-order-button" @onclick="PlaceOrder" disabled="@(!orderItems.Any())">Place Order</button>
                </div>
            </div>
        </div>
        <div class="additional-cards">
            <div class="popular-products">
                <h5>Popular Products</h5>
                <ul>
                    <li>Product 1</li>
                    <li>Product 2</li>
                    <li>Product 3</li>
                </ul>
            </div>
            <div class="sign-up-updates">
                <h5>Sign up for updates</h5>
                <form>
                    <input type="email" placeholder="Enter your email" required>
                    <button type="submit">Sign Up</button>
                </form>
            </div>
        </div>
    </div>
</div>


@code {
    decimal subTotal = 0;
    decimal tax = 0;
    decimal total = 0;
    bool showTableOverlay = false;
    int curParentID = -1;
    int selectedTable = 0;

    List<int> prevParentIds = [];

    List<Product>? menuItems;
    List<Categorie>? categories;
    List<Product>? addOns;
    List<Tafel> tables = new List<Tafel>();
    Dictionary<int, int> tempProductQuantities = new Dictionary<int, int>();
    Dictionary<int, int?> selectedAddOns = new Dictionary<int, int?>();
    List<OrderItem> orderItems = new List<OrderItem>();

    protected override async Task OnInitializedAsync()
    {
        categories = (await categorieService.GetParentCategoryAsync()).ToList();
        addOns = (await orderService.GetAddOnsAsync()).ToList();

        if (TableService != null)
        {
            tables = (await TableService.GetTablesAsync()).ToList(); // Fetch tables from the database
        }
    }

    void ShowTableOverlay()
    {
        showTableOverlay = true;
    }

    void HideTableOverlay()
    {
        showTableOverlay = false;
    }

    void SelectTable(int tableId)
    {
        selectedTable = tableId;
        showTableOverlay = false;
    }

    async Task LoadAllMenuItems()
    {
        menuItems = (await categorieService.GetProductsAsync()).ToList();
        InitializeTempQuantities();
    }

    async Task LoadMenuItems(int categoryId)
    {

        menuItems = (await categorieService.GetProductsByCategoryAsync(categoryId)).ToList();
        if (menuItems.Count > 0)
        {
            InitializeTempQuantities();
        }
        else
        {
            categories = (await categorieService.GetChildCategoryAsync(categoryId)).ToList();
            if (curParentID >= 0) { prevParentIds.Add(curParentID); }
            curParentID = categoryId;
        }
    }

    async Task LoadPrevCategories()
    {
        if (prevParentIds.Count > 0)
        {
            curParentID = prevParentIds[prevParentIds.Count - 1];
            prevParentIds.RemoveAt(prevParentIds.Count - 1);
        }
        else
        {
            curParentID = -1;
        }
        if (curParentID >= 0)
        {
            categories = (await categorieService.GetChildCategoryAsync(curParentID)).ToList();
        }
        else
        {
            categories = (await categorieService.GetParentCategoryAsync()).ToList();
        }
        menuItems = (await categorieService.GetProductsByCategoryAsync(curParentID)).ToList();
    }

    void InitializeTempQuantities()
    {
        tempProductQuantities = new Dictionary<int, int>();
        if (menuItems != null)
        {
            foreach (var item in menuItems)
            {
                tempProductQuantities[item.ProductID] = 0;
            }
        }
    }

    void SelectAddOn(ChangeEventArgs e, int productId)
    {
        var selectedAddOnId = int.TryParse(e.Value?.ToString(), out var result) ? result : (int?)null;
        if (selectedAddOns.ContainsKey(productId))
        {
            selectedAddOns[productId] = selectedAddOnId;
        }
        else
        {
            selectedAddOns.Add(productId, selectedAddOnId);
        }
    }

    void AddToOrder(Product product)
    {
        if (tempProductQuantities.TryGetValue(product.ProductID, out int quantity) && quantity > 0)
        {
            var existingItem = orderItems.FirstOrDefault(item => item.Product?.ProductID == product.ProductID);
            if (existingItem != null)
            {
                existingItem.AantalProduct += quantity;
            }
            else
            {
                orderItems.Add(new OrderItem { Product = product, AantalProduct = quantity });
            }

            if (selectedAddOns.TryGetValue(product.ProductID, out int? addOnId) && addOnId.HasValue)
            {
                var AddOnID = addOns?.FirstOrDefault(a => a.ProductID == addOnId.Value);
                if (AddOnID != null)
                {
                    orderItems.Add(new OrderItem { Product = AddOnID, AantalProduct = quantity });
                }
            }
            tempProductQuantities[product.ProductID] = 0; // Reset temporary quantity after adding to invoice
            UpdateTotal();
        }
    }

    // Function to increase the quantity of a temporary item
    void IncreaseAantalProductTemp(Product product)
    {
        if (tempProductQuantities.ContainsKey(product.ProductID))
        {
            tempProductQuantities[product.ProductID]++;
        }
    }

    // Function to decrease the quantity of a temporary item
    void DecreaseAantalProductTemp(Product product)
    {
        if (tempProductQuantities.ContainsKey(product.ProductID) && tempProductQuantities[product.ProductID] > 0)
        {
            tempProductQuantities[product.ProductID]--;
        }
    }

    int GetTempAantal(Product product)
    {
        if (tempProductQuantities.TryGetValue(product.ProductID, out int quantity))
        {
            return quantity;
        }
        return 0;
    }

    // Function to increase the quantity of an item
    void IncreaseAantalProduct(OrderItem OrderItem)
    {
        OrderItem.AantalProduct++;
        UpdateTotal();
    }

    // Function to decrease the quantity of an item
    void DecreaseAantalProduct(OrderItem OrderItem)
    {
        if (OrderItem.AantalProduct > 1)
        {
            OrderItem.AantalProduct--;
        }
        else
        {
            orderItems.Remove(OrderItem);
        }
        UpdateTotal();
    }

    // Function to update the totals
    void UpdateTotal()
    {
        subTotal = decimal.Round(orderItems.Sum(i => i.Product?.ProductPrijs * i.AantalProduct) ?? 0, 2);
        tax = decimal.Round(subTotal * 0.09M, 2);
        total = decimal.Round(subTotal + tax, 2);
    }

    public async Task PlaceOrder()
    {
        try
        {
            // if (tableId == 0)
            // {
            //     Console.WriteLine("Please select a table before placing the order.");
            //     return;
            // }
            // Controleer of er een lopende bestelling is voor de huidige TafelID
            var lopendeBestellingId = await orderService.CheckLopendeBestellingVoorTafelID(selectedTable);

            if (lopendeBestellingId != null && lopendeBestellingId > 0)
            {
                // Als er een lopende bestelling is, voeg een bestelronde toe
                await orderService.AddBestelrondeToBestellingAsync(selectedTable, (int)lopendeBestellingId, orderItems);
                Console.WriteLine($"Bestelronde toegevoegd aan lopende bestelling met ID: {lopendeBestellingId}");
            }
            else
            {
                // Als er geen lopende bestelling is, plaats een nieuwe bestelling
                var result = await orderService.PlaceOrderAsync(selectedTable, orderItems);
            }

            navigationManager.NavigateTo("/ordersuccess");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error placing order: {ex.Message}");
        }
    }

}