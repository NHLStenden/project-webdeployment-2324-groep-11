@page "/EmployeeOrders"
@using DieselBrandstofCafe.Components.Data
@using DieselBrandstofCafe.Components.Models
@inject IEmployeeService EmployeeService

<div class="container">
    <div class="row text-center">
        <div>
            <div class="h-100">
                <div class="card col-2 justify-content-center card-colour">
                    <h6 class="Text-padding text-colour" style="font-size:large; padding:13px;"><b>All Orders</b></h6>
                </div>
                <div class="card card-colour">
                    <div class="d-flex row card-maxheight">
                        <div style="padding:13px;">
                            <div class="card card-colour2">
                                <div class="row">
                                    <div class="col-2 text-colour2">Order ID</div>
                                    <div class="col-2 text-colour2">(Table ID)</div>
                                    <div class="col-2 text-colour2">Time</div>
                                    <div class="col-2 text-colour2">(Time Elapsed)</div>
                                    <div class="col-2 text-colour2">Status</div>
                                    <div class="col-2 text-colour2">Prijs</div>
                                </div>
                            </div>
                            <br />
                            <h5>Open Orders</h5>
                            @foreach (var item in OpenOrders)
                            {
                                <div class="card card-colour2">
                                    <div class="row" @onclick="() => ToggleOrder(item.BestellingID)">
                                        <div class="col-2 text-colour2">@item.BestellingID#</div>
                                        <div class="col-2 text-colour2">@item.TafelID</div>
                                        <div class="col-2 text-colour2">@item.TijdBestelling</div>
                                        <div class="col-2 text-colour2 @GetElapsedTimeClass(item)">@GetElapsedTimeText(item)</div>
                                        <div class="col-2 @GetStatusColorClass(item.StatusBestelling)">@item.StatusBestelling</div>
                                        <div class="col-2 text-colour2">€@item.TotaalPrijs</div>
                                    </div>

                                    @if (item.IsExpanded)
                                    {
                                        <div class="row">
                                            <div class="col-2 text-colour2 text-start">Amt</div>
                                        </div>
                                        <div class="card"></div>

                                        <div class="row">
                                            <div class="col-12">
                                                <ul>
                                                    @foreach (var product in item.Producten)
                                                    {
                                                        <li class="text-colour2">@product.ProductNaam - @product.AantalBetaald x</li>
                                                    }
                                                </ul>
                                            </div>
                                        </div>
                                        <div class="row text-end">
                                            <button class="col-1 btn btn-primary btn-sm" style="margin:10px" @onclick="() => MarkAsPaid(item.BestellingID)">Cash</button>
                                            <button class="col-1 btn btn-primary btn-sm" style="margin:10px" @onclick="() => MarkAsPaid(item.BestellingID)">Card</button>
                                        </div>
                                    }
                                </div>
                                <br />
                            }

                            <h5>Paid Orders</h5>
                            @foreach (var item in PaidOrders)
                            {
                                <div class="card card-colour2">
                                    <div class="row">
                                        <div class="col-2 text-colour2">@item.BestellingID#</div>
                                        <div class="col-2 text-colour2">@item.TafelID</div>
                                        <div class="col-2 text-colour2">@item.TijdBestelling</div>
                                        <div class="col-2 text-colour2 @GetElapsedTimeClass(item)">@GetElapsedTimeText(item)</div>
                                        <div class="col-2 @GetStatusColorClass(item.StatusBestelling)">@item.StatusBestelling</div>
                                        <div class="col-2 text-colour2">€@item.TotaalPrijs</div>
                                    </div>
                                    <br />
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    private List<Bestelling> PaidOrders = new List<Bestelling>();
    private List<Bestelling> OpenOrders = new List<Bestelling>();

    protected override async Task OnInitializedAsync()
    {
        // Haal de orders op vanuit de service
        var ordersInProgress = await EmployeeService.GetOrdersByStatusAsync("In Progress");
        var completedOrders = await EmployeeService.GetOrdersByStatusAsync("Completed");

        // Map de ontvangen orders naar het interne model als dat nodig is
        OpenOrders = ordersInProgress.Select(o => new Bestelling
            {
                BestellingID = o.BestellingID,
                TafelID = o.TafelID,
                TijdBestelling = o.CreationTime,
                StatusBestelling = o.StatusBestelling,
                TotaalPrijs = o.TotaalPrijs,
            }).ToList();

        PaidOrders = completedOrders.Select(o => new Bestelling
            {
                BestellingID = o.BestellingID,
                TafelID = o.TafelID,
                TijdBestelling = o.CreationTime,
                StatusBestelling = o.StatusBestelling,
                TotaalPrijs = o.TotaalPrijs,
            }).ToList();
    }

    private void ToggleOrder(int bestellingID)
    {
        var order = OpenOrders.FirstOrDefault(o => o.BestellingID == bestellingID);
        if (order != null)
        {
            order.IsExpanded = !order.IsExpanded;
        }
    }

    private void MarkAsPaid(int bestellingID)
    {
        var order = OpenOrders.FirstOrDefault(o => o.BestellingID == bestellingID);
        if (order != null)
        {
            order.StatusBestelling = "Paid";
            OpenOrders.Remove(order);
            PaidOrders.Add(order);
        }
    }

    private string GetStatusColorClass(string? status)
    {
        return status switch
        {
            "Pending" => "Status-Pending",
            "In Progress" => "Status-Progress",
            "Completed" => "Status-Completed",
            "Served" => "Status-Served",
            "Open" => "Status-Open",
            "Paid" => "Status-Paid",
            _ => "text-muted",
        };
    }

    private string GetElapsedTimeText(Bestelling order)
    {
        var elapsed = DateTime.Now - order.TijdBestelling;
        int totalMinutes = (int)elapsed.TotalMinutes;
        return $"{totalMinutes} min";
    }

    private string GetElapsedTimeClass(Bestelling order)
    {
        var elapsed = DateTime.Now - order.TijdBestelling;

        if (elapsed.TotalMinutes < 15)
        {
            return "elapsed-time-short";
        }
        else if (elapsed.TotalMinutes < 35)
        {
            return "elapsed-time-medium";
        }
        else
        {
            return "elapsed-time-long";
        }
    }
}
