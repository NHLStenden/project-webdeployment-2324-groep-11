@page "/EmployeeOrders"
@using DieselBrandstofCafe.Components.Data
@using DieselBrandstofCafe.Components.Models
@inject IEmployeeService EmployeeService


   <div class="container">
        <div class="row text-center">
            <div>
                <div class="h-100">
                    <div class="card col-2 justify-content-center card-colour">
                        <h6 class="Text-padding text-colour" style="font-size:large; padding:13px;"><b>All Orders</b></h6>
                        </div>
                    <div class="card card-colour">
                        <div class="d-flex row card-maxheight">
                            <div style="padding:13px;">
                                <div class="card card-colour2">
                                    <div class="row">
                                        <div class="col-2 text-colour2">Order ID</div>
                                        <div class="col-2 text-colour2">(Table ID)</div>
                                        <div class="col-2 text-colour2">Time</div>
                                        <div class="col-2 text-colour2">(Time Elapsed)</div>
                                        <div class="col-2 text-colour2"> Status</div>
                                        <div class="col-2 text-colour2">Prijs</div>
                                    </div>
                                </div>
                                    <br/>
                                @foreach (var item in combinedOrders)
                                {
                                <div class="card card-colour2">
                                    <div class="row">
                                        <div class="col-2 text-colour2">@item.BestellingID#</div>
                                        <div class="col-2 text-colour2">(Table ID)</div>
                                        <div class="col-2 text-colour2">@item.TijdBestelling</div>
                                        <div class="col-2 text-colour2">(Time Elapsed)</div>
                                        <div class="col-2 @GetStatusColorClass(item.StatusBestelling)">@item.StatusBestelling</div>
                                        <div class="col-2 text-colour2">€@item.TotaalPrijs</div>
                                    </div>
                                </div>
                                        <br />
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
   </div>


@code {
    private List<OrderWithProducts> bestellingen = new List<OrderWithProducts>();
    private List<OrderWithProducts> newBestellingen = new List<OrderWithProducts>();
    private List<OrderWithProducts> combinedOrders = new List<OrderWithProducts>();
    private List<OrderWithProducts> PendingBestellingen = new List<OrderWithProducts>();

    protected override async Task OnInitializedAsync()
    {
        var orders = await EmployeeService.GetOrderHistoryAsync();
        var newOrders = await EmployeeService.GetOrdersByStatusAsync("In Progress");
        var PendingOrders = await EmployeeService.GetOrdersByStatusAsync("Pending");

        bestellingen = orders.Select(order => new OrderWithProducts
            {
                BestellingID = order.BestellingID,
                TijdBestelling = order.TijdBestelling,
                StatusBestelling = order.StatusBestelling,
                TotaalPrijs = order.TotaalPrijs,
                Products = new List<ProductPerBestelronde>()
            }).ToList();

        /*newBestellingen = newOrders.Select(order => new OrderWithProducts
            {
                BestellingID = order.BestellingID,
                TijdBestelling = order.TijdBestelling,
                StatusBestelling = order.StatusBestelling,
                TotaalPrijs = order.TotaalPrijs,
                Products = new List<ProductPerBestelronde>()
            }).ToList();

        PendingBestellingen = PendingOrders.Select(order => new OrderWithProducts
            {
                BestellingID = order.BestellingID,
                TijdBestelling = order.TijdBestelling,
                StatusBestelling = order.StatusBestelling,
                TotaalPrijs = order.TotaalPrijs,
                Products = new List<ProductPerBestelronde>()
            }).ToList();*/

        foreach (var order in bestellingen)
        {
            var products = await EmployeeService.GetProductsForOrderAsync(order.BestellingID);
            order.Products.AddRange(products);
        }

        foreach (var order in newBestellingen)
        {
            var products = await EmployeeService.GetProductsForOrderAsync(order.BestellingID);
            order.Products.AddRange(products);
        }

        foreach (var order in PendingBestellingen)
        {
            var products = await EmployeeService.GetProductsForOrderAsync(order.BestellingID);
            order.Products.AddRange(products);
        }



        combinedOrders = PendingBestellingen.Concat(newBestellingen.Concat(bestellingen)).ToList();

        combinedOrders = combinedOrders
            .OrderByDescending(order => order.StatusBestelling == "Pending" || order.StatusBestelling == "In Progress")
            .ThenByDescending(order => order.TijdBestelling)
            .ToList();
    }


    public class OrderWithProducts
    {
        public int BestellingID { get; set; }
        public DateTime TijdBestelling { get; set; }
        public string? StatusBestelling { get; set; }
        public decimal TotaalPrijs { get; set; }
        public List<ProductPerBestelronde> Products { get; set; } = new();
    }

    string GetStatusColorClass(string? status)
    {
        switch (status)
        {
            case "Pending":
                return "Status-Pending";
            case "In Progress":
                return "Status-Progress";
            case "Completed":
                return "Status-Completed";
            default:
                return "text-muted";
        }
    }
}



