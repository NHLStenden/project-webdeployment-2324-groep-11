@page "/"
@using DieselBrandstofCafe.Components.Data
@using DieselBrandstofCafe.Components.Models
@inject NavigationManager NavigationManager
@inject IEmployeeService EmployeeService

<PageTitle>Home</PageTitle>

<div class="fixed-container">
    <h3>Ready</h3>
    @if (completedOrders != null && completedOrders.Any())
    {
        <div class="orders-container">
            @foreach (var order in completedOrders)
            {
                <div class="orders-card" key="@order.BestelrondeID">
                    <div class="todo-title-wrapper">
                        <div class="todo-table-status-container">
                            <h4 class="table-number">Table @order.TafelID</h4>
                            <h5 class="status-text @GetOrderStatusClass(order.StatusBestelling)">
                                @order.StatusBestelling @(":") @GetCompletionPercentage(order)%
                            </h5>
                        </div>
                        <div class="order-details-wrapper">
                            <h4 class="order-id">#@order.BestelrondeID</h4>
                        </div>
                    </div>
                    @if (order.Products != null && order.Products.Any())
                    {
                        <ul class="product-list-title-wrapper">
                            <li class="product-list-title">Amt</li>
                            <li class="product-list-title">Product</li>
                            <li class="product-list-title">Status</li>
                        </ul>
                        <ul class="product-list-wrapper">
                            @foreach (var product in order.Products)
                            {
                                <li class="@GetProductClass(product)" key="@($"{order.BestelrondeID}-{product.ProductID}")">
                                    <span>@product.AantalProduct @("x")</span>
                                    @product.ProductNaam
                                    @if (product.StatusBesteldeProduct == "Ready")
                                    {
                                        <i class="bi bi-check-circle-fill tick-icon"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-circle-fill circle-icon"></i>
                                    }
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p>No products found for this order.</p>
                    }
                    <div class="btns-container">
                        <button class="cancel-btn @(order.StatusBestelling != "Pending" ? "disabled" : "")" @onclick="() => OnCancelOrder(order)" disabled="@(order.StatusBestelling != "Pending")">Cancel</button>
                        <button class="serve-btn @(order.StatusBestelling != "Ready" ? "disabled" : "")" @onclick="() => OnServeOrder(order)" disabled="@(order.StatusBestelling != "Ready")">Serve</button>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p>No completed orders available.</p>
    }
</div>

<br />
<br />

<section class="main-section">
    <div class="container-fluid card">
        <!-- Welcome Section -->
        <div class="main-section-wrapper">
            <div class="col-md-6 main-section-contaioner">
                <h1 class="main-section-title-text">Welcome to <span style="color: #ee7721">Brandstof Cafe</span></h1>
            </div>
        </div>
        <div class="main-section-text-btns">
            <div class="main-section-subtitle">
                <p class="">Check out our menu and help customers please the order easily</p>
            </div>

            <!-- Order and Menu Buttons -->
            <div class="main-section-btns-container">
                <button class="main-section-btn">Order</button>
                <button class="main-section-btn" @onclick="ToMenu">Menu</button>
            </div>

            <!-- Order Instructions -->
            <div class="main-section-text">
                <h2><b>Order quickly and easily</b></h2>
                <h5><b>Follow these simple steps to place the order</b></h5>
            </div>
        </div>
        
        

        <!-- Order Steps -->
        <div class="info-cards-wrapper">
            <div class="info-cards-container">
                <div class="col-md-4">
                    <div class="info-cards-card">
                        <h3 class="text-start" style="color: #ee7721">1</h3>
                        <h5 class="text-start" style="color:white"><b>Go to the Menu</b></h5>
                        <p class="text-start" style="font-size:small; color:white">Check out our best dishes!</p>
                        <p class="text-start" style="font-size:small; color:white" @onclick="ToMenu"><a href="#">Order Now ></a></p>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="info-cards-card">
                        <h3 class="text-start" style="color: #ee7721">2</h3>
                        <h5 class="text-start" style="color:white"><b>Select a product and extra options</b></h5>
                        <p class="text-start" style="font-size:small; color:white">Select your product and any addons, place your order in the shopping cart</p>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="info-cards-card">
                        <h3 class="text-start" style="color: #ee7721">3</h3>
                        <h5 class="text-start" style="color:white"><b>Select a table, confirm, pay and wait for your order</b></h5>
                        <p class="text-start" style="font-size:small; color:white">You're almost there! Just select the table, make the payment, and we'll bring your food to you as soon as it's ready. You will also receive an email with the confirmation</p>
                    </div>
                </div>
            </div>
        </div>
        <br />
    </div>
</section>

<br />
<br />

<!-- Last Orders, Deals and Popular Products -->
<section class="bottom-section">
    <div class="bottom-section-wrapper">
        <div class="bottom-section-container">
            <div class="col-md-4">
                <div class="bottom-section-card">
                    <h6 class=""><b>Deals</b></h6>
                    <br />
                    <div class="d-flex flex-row">
                        <div class="col-md-6">
                            <h5 class="text-center ">Cold Coffee</h5>
                            <p class="text-center " style="font-size:small">Chilled coffee served over ice, sweetened and creamy</p>
                            <div class="text-center">
                                <button class="btn generic-button">More info</button>
                                <button class="btn generic-button" @onclick="ToMenu">Order</button>
                            </div>
                        </div>
                        <img src="#" class="rounded col-md-6" alt="Step 3 image" />
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="bottom-section-card">
                    <h6 class=""><b>Popular Products</b></h6>
                    <br />
                    <div class="d-flex flex-row">
                        <div class="col-md-6">
                            <h5 class="text-center">Espresso</h5>
                            <p class="text-center" style="font-size:small">Strong Italian coffee, base for drinks like lattes</p>
                            <div class="text-center">
                                <button class="btn generic-button">More info</button>
                                <button class="btn generic-button" @onclick="ToMenu">Order</button>
                            </div>
                        </div>
                        <img src="#" class="rounded col-md-6" alt="Step 3 image" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<br />
<br />
<br />
<br />

@code {
    private List<Bestelling> CompleteBestellingen = new List<Bestelling>();
    private List<OrderWithProducts> PendingBestellingen = new List<OrderWithProducts>();
    private List<OrderWithProducts> ProgressBestellingen = new List<OrderWithProducts>();
    private List<OrderWithProducts> completedOrders = new List<OrderWithProducts>();

    protected override async Task OnInitializedAsync()
    {
        CompleteBestellingen = (await EmployeeService.GetOrderHistoryAsync()).ToList();
        PendingBestellingen = (await EmployeeService.GetOrdersByStatusAsync("Pending")).ToList();
        ProgressBestellingen = (await EmployeeService.GetOrdersByStatusAsync("In Progress")).ToList();
        completedOrders = (await EmployeeService.GetOrdersByStatusAsync("Ready")).ToList();

        // Fetch products for each order in completedOrders
        foreach (var order in completedOrders)
        {
            var products = await EmployeeService.GetProductsForBestelrondeAsync(order.BestelrondeID);
            order.Products = products.ToList();
        }
    }

    public void ToMenu()
    {
        NavigationManager.NavigateTo("/menu");
    }

    private string GetOrderStatusClass(string status)
    {
        return status switch
        {
            "Pending" => "status_pending",
            "In Progress" => "status_in-progress",
            "Ready" => "status_completed",
            "Served" => "status_served",
            "Cancelled" => "status_cancelled",
            _ => string.Empty,
        };
    }

    private string GetStatusColorClass(string status)
    {
        return status switch
        {
            "Pending" => "status_pending",
            "In Progress" => "status_in-progress",
            "Ready" => "status_completed",
            "Served" => "status_served",
            "Cancelled" => "status_cancelled",
            _ => string.Empty,
        };
    }

    private double GetCompletionPercentage(OrderWithProducts order)
    {
        if (order.StatusBestelling == "Cancelled" || order.StatusBestelling == "Served")
        {
            return 100;
        }

        if (order.Products == null || order.Products.Count == 0) return 0;

        var completedProducts = order.Products.Count(p => p.StatusBesteldeProduct == "Ready");
        var percentage = (completedProducts / (double)order.Products.Count) * 100;
        return Math.Round(percentage);
    }

    private string GetElapsedTimeClass(OrderWithProducts order)
    {
        var elapsed = DateTime.Now - order.CreationTime;

        if (elapsed.TotalMinutes < 15)
        {
            return "elapsed-time-short";
        }
        else if (elapsed.TotalMinutes < 35)
        {
            return "elapsed-time-medium";
        }
        else
        {
            return "elapsed-time-long";
        }
    }

    private string GetElapsedTimeText(OrderWithProducts order)
    {
        var elapsed = DateTime.Now - order.CreationTime;
        int totalMinutes = (int)elapsed.TotalMinutes;
        return $"{totalMinutes} min";
    }

    private string GetProductClass(ProductPerBestelronde product)
    {
        return product.StatusBesteldeProduct == "Served" || product.StatusBesteldeProduct == "Ready" || product.StatusBesteldeProduct == "Cancelled" ? "completed-product" : string.Empty;
    }

    private async Task OnCancelOrder(OrderWithProducts order)
    {
        await EmployeeService.UpdateOrderStatusAsync(order.BestelrondeID, "Cancelled");
        await RefreshCompletedOrders();
    }

    private async Task OnServeOrder(OrderWithProducts order)
    {
        await EmployeeService.UpdateOrderStatusAsync(order.BestelrondeID, "Served");
        await RefreshCompletedOrders();
    }

    private async Task RefreshCompletedOrders()
    {
        completedOrders = (await EmployeeService.GetOrdersByStatusAsync("Ready")).ToList();

        // Fetch products for each order in completedOrders
        foreach (var order in completedOrders)
        {
            var products = await EmployeeService.GetProductsForBestelrondeAsync(order.BestelrondeID);
            order.Products = products.ToList();
        }

        StateHasChanged();
    }
}