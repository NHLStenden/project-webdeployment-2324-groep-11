@page "/myorders"
@using DieselBrandstofCafe.Components.Data
@using DieselBrandstofCafe.Components.Models
@inject IEmployeeService EmployeeService

<section>
    <div class="container">
        <div class="row text-center">
            <div class="col-2 card">
                <h3>Orders</h3>
            </div>
        </div>
        <div class="card">
        </div>
    </div>
</section>

<br />
<br />

<section>
    <div class="container">
        <div class="row text-center">
            <div class="col-lg-4">
                <div class="card h-100 card-padding">
                    <h6 class="Text-padding" style="font-size:large; padding:13px;"><b>Order History</b></h6>
                    <div class="d-flex row card-maxheight">
                        <div style="padding:13px;">
                            @foreach (var item in combinedOrders)
                            {
                                <div class="row">
                                    <div class="col-6">@item.BestellingID#</div>
                                    <div class="col-6">@item.TijdBestelling</div>
                                </div>
                                <div class="row">
                                    <div class="col-6 @(item.StatusBestelling == "Pending" ? "Status-Pending" : "Status-Completed")">@item.StatusBestelling</div>
                                    <div class="col-6">€@item.TotaalPrijs</div>
                                </div>
                                
                                <button @onclick="() => SelectOrder(item.BestellingID)" class="generic-button">See Details</button>
                                <br />
                                <br />
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-8">
                <div class="card h-100 card-padding container">
                    <h6 class="Text-padding" style="font-size:large; padding-top:13px"><b>Order </b></h6>
                    <br />
                    <div class="Order-Text">
                        @if (selectedOrder != null)
                        {
                            <div>
                                <p style="font-size:x-large;">Order Details:</p>
                                <div class="row">
                                    <p class="col-5 text-start">Bestelling ID:</p> 
                                    <p class="col-7 text-start"> <b>@selectedOrder.BestellingID</b></p>
                                </div>
                                <div class="row">
                                    <p class="col-5 text-start">Tijd Bestelling:</p>
                                    <p  class="col-7 text-start"><b>@selectedOrder.TijdBestelling</b></p>
                                </div>
                                <div class="row">
                                    <p class="col-5 text-start">Status Bestelling:</p>
                                    <p  class="col-7 text-start"><b>@selectedOrder.StatusBestelling</b></p>
                                </div>
                                <div class="row">
                                    <p class="col-5 text-start">Totaal Prijs:</P>
                                    <p  class="col-7 text-start"><b>€@selectedOrder.TotaalPrijs</b></p>
                                </div>
                                <p>Producten:</p>
                                <ul class="justify-content-center">
                                    @foreach (var product in selectedOrder.Products)
                                    {
                                         <li><b>@product.ProductNaam - @product.AantalProduct x</b></li>
                                    }
                                </ul>
                                <br />
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code {
    private List<OrderWithProducts> bestellingen = new List<OrderWithProducts>();
    private OrderWithProducts? selectedOrder;
    private List<OrderWithProducts> newBestellingen = new List<OrderWithProducts>();
    private List<OrderWithProducts> combinedOrders = new List<OrderWithProducts>();

    protected override async Task OnInitializedAsync()
    {
        var orders = await EmployeeService.GetOrderHistoryAsync();
        // var newOrders = await EmployeeService.GetNewOrdersAsync();

        bestellingen = orders.Select(order => new OrderWithProducts
        {
            BestellingID = order.BestellingID,
            TijdBestelling = order.TijdBestelling,
            StatusBestelling = order.StatusBestelling,
            TotaalPrijs = order.TotaalPrijs,
            Products = new List<ProductPerBestelronde>()
        }).ToList();

        // newBestellingen = newOrders.Select(order => new OrderWithProducts
        // {
        //     BestellingID = order.BestellingID,
        //     TijdBestelling = order.TijdBestelling,
        //     StatusBestelling = order.StatusBestelling,
        //     TotaalPrijs = order.TotaalPrijs,
        //     Products = new List<ProductPerBestelronde>()
        // }).ToList();

        foreach (var order in bestellingen)
        {
            var products = await EmployeeService.GetProductsForOrderAsync(order.BestellingID);
            order.Products.AddRange(products);
        }

        foreach (var order in newBestellingen)
        {
            var products = await EmployeeService.GetProductsForOrderAsync(order.BestellingID);
            order.Products.AddRange(products);
        }

        
        combinedOrders = newBestellingen.Concat(bestellingen).ToList();

        
        combinedOrders = combinedOrders
            .OrderByDescending(order => order.StatusBestelling == "pending")
            .ThenByDescending(order => order.TijdBestelling)
            .ToList();
    }

    private void SelectOrder(int bestellingID)
    {
        selectedOrder = combinedOrders.FirstOrDefault(order => order.BestellingID == bestellingID);
    }

    public class OrderWithProducts
    {
        public int BestellingID { get; set; }
        public DateTime TijdBestelling { get; set; }
        public string? StatusBestelling { get; set; }
        public decimal TotaalPrijs { get; set; }
        public List<ProductPerBestelronde> Products { get; set; } = new();
    }
}
